name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: 1

defaults:
  run:
    shell: bash

jobs:
  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-18.04, macos-latest, windows-latest]
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Rust
  #       # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
  #       run: rustup update stable --no-self-update
  #     - run: cargo install cargo-hack

  #     - name: Install dependencies (linux)
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install xorg-dev libglu1-mesa-dev
  #       if: startsWith(matrix.os, 'ubuntu')
  #     - name: Install dependencies (windows)
  #       run: |
  #         git clone https://github.com/PistonDevelopers/binaries
  #         mv binaries/x86_64/freetype.dll $HOME/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib/
  #         mv binaries/x86_64/freetype.lib $HOME/.rustup/toolchains/stable-x86_64-pc-windows-msvc/lib/rustlib/x86_64-pc-windows-msvc/lib/
  #       if: startsWith(matrix.os, 'windows')

  #     - run: cargo fmt --check
  #     - run: cargo clippy --all-targets
  #     - run: cargo hack build --feature-powerset
  #     - run: cargo test

  cross:
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-20.04
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        # --no-self-update is necessary because the windows environment cannot self-update rustup.exe.
        run: rustup toolchain install stable --no-self-update --target ${{ matrix.target }}

      - name: Install cross-compilation tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')
      - name: Install dependencies (aarch64 linux)
        run: |
          sudo sed -i 's/azure\.//' /etc/apt/sources.list
          sudo apt-get update -yqq
          sudo dpkg --add-architecture arm64
          sudo apt-get update -yqq
          sudo apt-get install xorg-dev:arm64 libglu1-mesa-dev:arm64
        if: matrix.target == 'aarch64-unknown-linux-gnu'

      - run: cargo build --target ${{ matrix.target }}
      - run: cargo test --target ${{ matrix.target }} --no-run
      - run: cargo test --target ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu')

  # wasm:
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Install Rust
  #       run: rustup update stable
  #     - run: rustup target add wasm32-unknown-unknown
  #     - name: Install wasm-pack
  #       run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
  #     - run: cargo build --target wasm32-unknown-unknown --no-default-features --lib
  #     - name: Build wasm example
  #       run: cd examples/wasm && npm install && npm run build
